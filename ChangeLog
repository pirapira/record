2016-11-16  Yoichi Hirai  <yoichi@ethereum.org>

	* eth-isabelle:
	mostly integrating Lem files
	I had to replace many `abbreviation`s in the original Isabelle/HOL source with `declare ... [simp]`s.

2016-11-15  Yoichi Hirai  <yoichi@ethereum.org>

	* swarm: how does the incentive work?

	* eip: 155, 158, 160, 170

	* read: https://github.com/rmerom/PutYourMoneyWhereYourContractIs
	It seems like this framework can support attacks that involve reentrancy etc.
	Bounty vs. formal verification.  Maybe bounty hunting using formal verification?

2016-11-14  Yoichi Hirai  <yoichi@ethereum.org>

	* bamboo: the empty contract works somehow.
	I think this should be automatically tested.
	I should prioritize trying out these testing frameworks out there.

	* solidity: #1334 not being sure I'm going to the right direction.
	Somehow picked #1344.  Enum cleanup.

2016-11-12  Yoichi Hirai  <yoichi@ethereum.org>

	* bamboo: got the first bytecode output.
	I need to test this.
	I realized that I need a counter for dynamically generating mappings.

2016-11-11  Yoichi Hirai  <yoichi@ethereum.org>

	* bamboo: slowly pushing forward
	I believe it will get only easier from here.

	* evm: a paper about optimization http://set.ee/publications/bytecode07.pdf
	maybe useful within a basic block

	* solidity: added some tests for first class contracts

2016-11-10  Yoichi Hirai  <yoichi@ethereum.org>

	* ../solidity/libsolidity/parsing/Parser.cpp (dev):
	after M-., M-, goes back to the place before the search

2016-11-09  Yoichi Hirai  <yoichi@ethereum.org>

	* bamboo: slowly pushing things forward
	Now generating layout info from the information available at that stage.
	Currently figuring out what information is available.

	* eth-isabelle: copying comments into Lem files

	* ../solidity/libsolidity/parsing/Parser.cpp (dev): enum conversion overflows.  #1334
	Also #1292, #1293.

2016-11-08  Yoichi Hirai  <yoichi@ethereum.org>

	* eth-isabelle:
	added Lem files and prepared some Makefile goals

	* ../solidity/libsolidity/codegen/ContractCompiler.h (dev): figured out where the internal function tags are pushed

	* solidity: just realized that the runtime code generation has to consider the internal functions that were referenced in the constructor.

2016-11-07  Yoichi Hirai  <yoichi@ethereum.org>

	* ../solidity/libsolidity/codegen/CompilerContext.cpp (dev):
	eth::AssemblyItem CompilerContext::FunctionCompilationQueue::entryLabel()
	is the function that can lookup/create a tag for an internal function

	* eth-isabelle:
	Moving slowly to incorporate the Lem code.

	* ../solidity/libsolidity/codegen/ContractCompiler.cpp (solidity):
	I was mainly reading the solidity code down to CompilerContext.h and the dependent header files.

2016-11-04  Yoichi Hirai  <yoichi@ethereum.org>

	* ../solidity/test/libsolidity/SolidityEndToEndTest.cpp (dev):
	Adding more test cases around functions.

	* dump:
	dumped all code on the mainnet.  What shall I try with it?

2016-11-03  Yoichi Hirai  <yoichi@ethereum.org>

	* ../../contracts/0xd2e1: some contract hunting on the blockchain

	* ../solidity/solc/CommandLineInterface.cpp (dev): gdb
	catch throw

2016-11-02  Yoichi Hirai  <yoichi@ethereum.org>

	* solidity: how to generate random Solidity programs?
	Csmith
	What papers cite csmith?
	I guess I have to write something on my own.

	* env: trying 'planner' app
	scheduled the near future of the eth-isabelle project

	* hol-testgen: https://www.brucker.ch/bibliography/download/2016/brucker.ea-hol-testgen-2016.pdf
	Maybe I can use this to produce test cases for on-chain contracts,
	or I can produce random solidity programs.

	* eth-isabelle:
	tried sledgehammer [prover="remote_waldmeister"] on some final goals, but this didn't succeed

2016-11-01  Yoichi Hirai  <yoichi@ethereum.org>

	* solidity: still on #1292

	* comm: gave a talk at the Berlin Ethereum Meetup
	https://yoichihirai.com/deedtalk.pdf

2016-10-31  Yoichi Hirai  <yoichi@ethereum.org>

	* eth-isabelle:
	preparing the talk on the meetup tomorrow.

	* solidity:
	Overload conflicts, wondering about several things.
	`A is B,C` is the ordering of B,C relevant or not? (turns out yes, as documented)
	should functions in B and C with the same name conflict?

2016-10-28  Yoichi Hirai  <yoichi@ethereum.org>

	* eth-isabelle:
	realized that CALLCODE and DELEGATECALL does not follow the established invariants about the account's code.
	Somehow released the results about the Deed contract.

2016-10-27  Yoichi Hirai  <yoichi@ethereum.org>

	* eth-isabelle:
	Somehow finished the proofs around Deed contract again.

2016-10-26  Yoichi Hirai  <yoichi@ethereum.org>

	* ../eth-isabelle/ContractSem.thy: I found a bug in JUMPI
	the return data was not written to the memory.
	I'm glad I found these before I say I verified a contract.

2016-10-25  Yoichi Hirai  <yoichi@ethereum.org>

	* https://www.cs.princeton.edu/~appel/papers/controllogic.pdf
	Maybe this is useful.
	We have jumps to locations specified in the stack.
	This might be a problem.
	Maybe we propagate conditions somehow.
	Jump-destinations paired with conditions that are known to be safe.

2016-10-24  Yoichi Hirai  <yoichi@ethereum.org>

	* eth-isabelle:
	Now the Deed analysis is ready to go out.  It proves a strong enough statement.
	So the rest is PDF clanup.

	* ../solidity/Changelog.md (Bugfixes): Working on two pull-requests
	#1274 and #1264

2016-10-23  Yoichi Hirai  <yoichi@ethereum.org>

	* ../eth-isabelle/document/root.tex (section{Introduction}):
	Finished proving some properties about the Deed contract.
	Now I'm working on a nice document about this.

2016-10-21  Yoichi Hirai  <yoichi@ethereum.org>

	* ../solidity/libsolidity/codegen/ExpressionCompiler.cpp (dev):
	I think I solved #1116.  PR 1263 created.

2016-10-20  Yoichi Hirai  <yoichi@ethereum.org>

	* ../solidity/libsolidity/codegen/ExpressionCompiler.cpp (dev):
	Started dealing with issue 1116.  The problem seems to be that the library is visited.

	* Isabelle/HOL
	Reading a list into an AVL tree takes about 10 mins.
	Maybe that's fine for now.
	For the future we need more optimizations.

	Learnt to search theorems by "name: if_splits"

	* ../solidity/libsolidity/parsing/Parser.cpp (dev):
	just read ASTNodeFactory

2016-10-19  Yoichi Hirai  <yoichi@ethereum.org>

	* Isabelle/HOL simplifier debugger
	https://speakerdeck.com/larsrh/interactive-simplifier-tracing-and-debugging-in-isabelle
	https://www21.in.tum.de/~hupel/pub/simp-trace.pdf
	using [[simp_trace_new mode = full]]

	The simplifier is very clever, when the right hand side looks heavier it does not consider using the equation, even when it's in the simplification database

2016-10-18  Yoichi Hirai  <yoichi@ethereum.org>

	* ../eth-isabelle/example/Deed.thy:
	The simplifier spends 15 minutes for 9 instructions.  This needs to be optimized.

	* ../eth-isabelle/parser/hexparser.rb:
	Wrote a parser in ruby, whose inputs are hex codes and the outputs are in Isabelle/HOL

	* ../solidity/libsolidity/ast/AST.cpp:
	While Isabelle/HOL is simplifying terms, I have time for Solidity bugs

2016-10-17  Yoichi Hirai  <yoichi@ethereum.org>

	* ../eth-isabelle/Parse.thy:
	Found that the bytecode parser in Isabelle/HOL is very slow.
	Maybe I'll rewrite once more and see if it's still slow.
	It seems like the accumulator technique is actually harmful.

2016-10-15  Yoichi Hirai  <yoichi@ethereum.org>

	* ../eth-isabelle/ContractSem.thy:
	Learnt apply(simp split: if_splits)

2016-10-14  Yoichi Hirai  <yoichi@ethereum.org>

	* ../eth-isabelle/RelationalSem.thy:
	Developed a hybrid of the deterministic function and some nondeterministic steps representing the world's choices.

2016-10-13  Yoichi Hirai  <yoichi@ethereum.org>

	* solidity:
	Tried to read some of the recent pull-requests.  Created more issues.

	* ../eth-isabelle/RelationalSem.thy (step):
	I was trying to create a relational semantics, but found it painful to use.
	Maybe I'm going to define things as functions as long as the things are deterministic.

	* ../eth-isabelle/example/FailOnReentrance.thy:
	Finished all opcodes except GAS, and trying some more small programs.

2016-10-12  Yoichi Hirai  <yoichi@ethereum.org>

	* ../yellowpaper/Paper.tex (section{Fee Schedule}\label{app:fees}):
	submitted a PR about EIP150 on the yellow paper

	* env: set up pgp key on github

	* ../eth-isabelle/ContractSem.thy:
	Implementing more and more opcodes.
	Isabelle/HOL's word library makes this comfortable.

	* env: ordered an armrest
	Ergonomics is important

2016-10-11  Yoichi Hirai  <yoichi@ethereum.org>

	* ../eth-isabelle (eth-isabelle):
	Now the semantics is aware that Eth balances can suddenly increase.
	Also, annotations in the bytecode is supported.  Statements on the current state can be verified.

2016-10-10  Yoichi Hirai  <yoichi@ethereum.org>

	* ../eth-isabelle/ContractSem.thy: Now the proofs in Isabelle/HOL is much shorter
	https://github.com/ethereum/solidity/issues/1178#issuecomment-252673920

	* ../evmverif/coq/ContractSem.v: finished porting the general parts of evmverif that applies to all contracts.
	During the course, found a bug in the original evmverif.

2016-10-07  Yoichi Hirai  <yoichi@ethereum.org>

	* solidity: created a quick PR to fix #1177

	* bamboo: implementing hex generation

	* comm: discussion with @axic resulted in https://github.com/ethereum/solidity/issues/1178

	* evmverif: shortened the proof script a bit

2016-10-06  Yoichi Hirai  <yoichi@ethereum.org>

	* remark:
	The next step of the evmverif looks like
	- developing small semi-automations
	- adding program logic (I have somebody interested in this!)
	- adding more opcodes

	* ../bamboo/src/codegen/hex.mli (bamboo):
	spent some time implementing the code generation of bamboo

	* ../solidity/libsolidity/inlineasm/AsmParser.cpp (solidity):
	spent some time trying pull-requests on solidity

	* evmverif:
	streamlined proofs.  Before this, the case analysis was made along the
	if sentences in the specification.  After this, the case analysis is
	made along the conditional jumps in the EVM bytecode.

2016-10-05  Yoichi Hirai  <yoichi@ethereum.org>

	* evmverif:
	A youtube video https://www.youtube.com/playlist?list=PL9oaY6Y4QxRZybj86eGItGVApxLXVIXHz

	* plan: I think moving to Isabelle/HOL now is not the greatest choice, so
	Coq bytecoe verification (evmverif) 40%
	bamboo: long / high impact: 30%
	C++ world: 30%

2016-10-04  Yoichi Hirai  <yoichi@ethereum.org>

	* env: bought a headset so that I can shoot a video

	* ../bamboo/src/lib/ethereum.ml (bamboo):
	trying to compute ABI signatures of cases.
	Now looking at cryptokit library of OCaml.
	Some how I checked out
	svn checkout svn://ssh.ocamlcore.org/svn/cryptokit/trunk
	Yes I got it somehow working.
	remembered object#method syntax of OCaml.
	This ended up in https://github.com/pirapira/bamboo/commit/8329ee6ebfa1c6a1614b9a1c7bfec6d6b286d5a4

	* casper: sent a mail about the casper draft

2016-10-01  Yoichi Hirai  <yoichi@ethereum.org>

	* vmtrace_enricher:
	some transaction graphing tool.
	https://github.com/pirapira/vmtrace_enricher

2016-09-29  Yoichi Hirai  <yoichi@ethereum.org>

	* yellowpaper:
	opened #187

	* dr-y:
	implemented DELEGATECALL
	updated the online version

	* evm: DELEGATECALL and CALLCODE, learned the difference

	* bamboo:
	Touched bamboo compiler a bit.

	* plan: after the enricher thing, the percentage would then be
	isabelle/hol bytecoe verification 40%
	bamboo: long / high impact: 30%

	* plan:
	When I think about it, in the end, trusting solc is still a risk.
	So I need to change the focus.
	-- a. Create a youtube video how to do bytecode level verification
	   because I finished one example, and you don't know how it works.
	-- b. I'll try the same example in Isabelle/HOL
	-- c. Solidity to output annotated bytecode and then to
	   use Oyente // write a proof about that.
	   -- Easier and more trustworthy.

2016-09-28  Yoichi Hirai  <yoichi@ethereum.org>

	* comm: some discussion on gitter

	* enricher:
	https://github.com/pirapira/vmtrace_enricher
	getting in shape

	* comm: call

2016-09-27  Yoichi Hirai  <yoichi@ethereum.org>

	* plan:
	when this enricher thing finishes,
	dry: next goal is big anyway: 10%
	compare verification tools: main: 45%
	bamboo: long / high impact: 30%

	* read: http://www.lsv.ens-cachan.fr/Publis/PAPERS/PDF/DKR-csfw06.pdf
	What is "coercion resistance"

	* oyente: documented how to get it working
	https://github.com/pirapira/practice/blob/master/compare-tools/getting_oyente_working.md
	https://github.com/pirapira/practice/blob/master/compare-tools/oyente-on-ens.md

	* go-ethereum: reviewing #3045

	* comm: reviewed an article based on an interview

2016-09-26  Yoichi Hirai  <yoichi@ethereum.org>

	* plan:
	thinking how much time to spend on what project.
	enricher: short / high impact: 40%
	dry: next goal is big anyway: 2%
	compare verification tools: main: 15%
	bamboo: long / high impact: 10%

	* solidity: reported issue #1121 as well
	Just something about non-existent options.

	* solidity: reported issue #1120
	I was trying to do something else when I hit the internal compiler error.

	* read: https://uport.me/#home

	* comm: on the gitter formal verification channel, people were wondering about Oyente's internal state representation.
	created oyente#5 for division by zero

	* ../go-ethereum/core/state/state_object.go:
	was reading recent changes.

2016-09-14  Yoichi Hirai  <yoichi@ethereum.org>

	* bamboo: parser can parse a simple example

	* env: preparing for trip

2016-09-13  Yoichi Hirai  <yoichi@ethereum.org>

	* ../solidity/test/libsolidity/SolidityEndToEndTest.cpp (dev):
	picked up an issue that looked easy enough.  (minint()/(-1).

2016-09-12  Yoichi Hirai  <yoichi@ethereum.org>

	* solidity:
	prepared a Why3 example before the talk
	also prepared some of the slides

2016-09-11  Yoichi Hirai  <yoichi@ethereum.org>

	* read: https://ethereum.karalabe.com/talks/2016-hackethon.html#21
	This is a very good talk.

2016-09-10  Yoichi Hirai  <yoichi@ethereum.org>

	* solidity: #1053
	array of arrays.
	aliasing.

2016-09-09  Yoichi Hirai  <yoichi@ethereum.org>

	* env: introduced ccache

	* lifehack: Alt-Tab with one hand is a bit constraining. Using both hands it's much easier.

	* solidity: Translation of mapping[idx] being developed locally; now blocked by #1045.
	Maybe I should start creating a bigger PR.  That's easier to manage.

	* dry: now only one instruction is missing

	* yellowpaper: wondered how memory sizes are computed after [2^255-1, 7) bytes are accessed.
	Created a PR.

2016-09-08  Yoichi Hirai  <yoichi@ethereum.org>

	* dry: added ORIGIN, CODESIZE and PC instructions
	https://github.com/pirapira/dry-analyzer

	* solidity: trying solc --formal token.sol
	I'm meeting many problems one after another.  Many problems depend on each other: before solving one I cannot even observe the other.
	In solidity repository, reported #1054, #1062, #1065 and #1066 about this.
	I opened PRs for #1054 and #1062 but I haven't started with the last two.

	* lifehack:
	I started using something like a legal pad to keep track of what I'm doing.
	Whenever I come up with a thing to do, I add it as the last line, but keep on working on the current item.
	When the current item is not urgent it goes to the todo app, and the line is crossed out.
	When the current item depends on something else, I draw an arrow showing the dependency and move to the next item.
	When I have to wait for the machine, I start on the next item in parallel.
	One thing I found today.  I started writing the tmux pane index to the current items.
	This makes it much easier to go back where I was.

2016-09-07  Yoichi Hirai  <yoichi@ethereum.org>

	* ../solidity/libsolidity/formal/Why3Translator.cpp: Oh it collapeses all namespaces...
	(appendPreface): raw string literal R"....".

	* ../solidity/libsolidity/ast/AST_accept.h (dev): This file defines the visiting order
	(dev) saw the visitor pattern.  In OCaml there would be a traversing function that takes a function.

	* ../solidity/libsolidity/ast/AST.h (dev): need to know the difference of Default, Private, Internal, Public, External

	* ../solidity/libsolidity/ast/ASTAnnotations.h (dev): "///<" tells doxygen that the comment comes after the element

	* ../solidity/libsolidity/ast/Types.h (dev): what is TypeType? ... as in uint32(2)
	(dev): what is InaccessibleDynamic?
	(dev): what is a `using for` directive?
	(dev): why is IntegerType::m_bits signed?
	(dev): calldataEncodedSize assumes m_bits is not larger than 256.
	(dev): isAddress(), isSigned() why expose two bits instead of a ternary choice?
	(dev): FixpointType::calldataEncodedSize() also assumes everything is not bigger than 256 bits, but the constructor forces it.
	(dev): how to interface mappings when libraries
	(dev): `actualType` is is actual?

	* ../solidity/libsolidity/parsing/Token.h (dev):
	I cannot imagine how ElementaryTypeNameToken would be used.  Two numbers?

	* ../solidity/libsolidity/ast/ASTForward.h: I've never thought about accumulating many forward declarations into one file.  neat.

	* ../solidity/libsolidity/interface/Exceptions.h (dev): So, we live in ::dev::solidity
	(dev): Why3TranslatorError seems useful
	(dev): Why is a list called SecondarySourceLocation
	(dev): boost::error_info, wow this uses an incomplete type as a tag!

	* ../solidity/libdevcore/Exceptions.h (dev): err_info_comment etc seem useful.

	* ../solidity/libdevcore/FixedHash.h (dev): "\342\200\246" is what?

	* ../solidity/libdevcore/Common.h (dev): ScopeGuard should be useful

	* solidity: trying to solve some ambiguities in
	#1037, #1038

	* emacs: (setq-default c-default-style "bsd")
	This looked closer to our style.

	* read: http://www.spark-2014.org/entries/detail/research-corner-spark-2014-vs-frama-c-vs-why3
	compares Ada SPARK and Frama-C
	design choices
	ghost code
	understanding failures
	Does it make sense to dynamically check the post-conditions at runtime?
	  ah, OK, that's why E-ACSL was created.
	Does it make sense to allow program functions in the specification?
	  In that case, like in SPARK, side-effect-less functions should be considered.
	Maybe ghost codes should be supported
	Maybe view functions should be available in the specification

2016-09-06  Yoichi Hirai  <yoichi@ethereum.org>

	* solidity: test/soltest
	When I run it it shows a message `ERROR: ipcPath not set!`
	Maybe I should start a client instance for this one.
	Is this tool documented?

	* read: http://research.microsoft.com/en-us/um/people/nswamy/papers/solidether.pdf
	Eth effect useful under a particular design pattern, where any send failures would abort the whole program execution.
	The Eth condition can be strengthened so that it guarantees, after one call fails no subsequent calls would happen.

	* read: https://github.com/ewasm/evm2wasm/blob/master/wasm/ADDMOD.wast
	256 bit calculus -> 64 bit calculus measn everything has to be done four times.
	This kind of problem is a good target for Isabelle/HOL, for instance.

	* read:
	https://medium.com/@graycoding/lessons-learned-from-making-a-chess-game-for-ethereum-6917c01178b6
	This means
	- there should be a way to translate state diagram into executables
	- need of off-chain, on-chain integration
	  (maybe some partial evaluation type systems)

2016-09-05  Yoichi Hirai  <yoichi@ethereum.org>

	* dry: added arithmetic instructions
	https://github.com/pirapira/dry-analyzer/issues/6

	* cpp-ethereum: created #3287

	* solidity: reviewed #994 and #993

	* general: created a list of projects with merits/time points.

	* dry: created issues for missing opcodes.

	* ../go-ethereum/eth/api.go: TraceTransaction
	I came up with an idea of annotating vm.trace with the origins of the values on the stack.
	Maybe this would add {op_arg_origin: [{step: 6, desc: "CALLER"}]} in each step.
	http://ethereum.stackexchange.com/questions/4282/how-to-check-the-vm-trace-using-geth
	So, created a github issue about it.  https://github.com/pirapira/dry-analyzer/issues/11

2016-09-04  Yoichi Hirai  <yoichi@ethereum.org>

	* general: on Gitter, explained the trade off between the bytecode verification and Solidity verification
	bytecode has ease of verification, and the trustworthiness of the result
	Solidity has readability

	* ewasm: WASM semantics in K system
	https://github.com/kframework/wasm-semantics
	looks small.  Is this the whole language?

2016-09-03  Yoichi Hirai  <yoichi@ethereum.org>

	* why3: lively discussion on Gitter
	@mrsmkl shortened the why3-token file
	"why3" tactic not working with Coq 8.5
	@leonardoalt SeaHorn and CPAChecker might be able to prove invariants
	Think about Solidity -> LLVM and what can be done

	* dry: got a pull-request from @tomsib2001

	* env: got a chair and a desk at home.

	* dry: Dr. Y's anayzer out in reddit.  Got some feedbacks.  Need to implement all instructions.

2016-09-02  Yoichi Hirai  <yoichi@ethereum.org>

	* why3: double_wp module
	A formalization of a stack machine.  Possible to verify bytecode fragments and then compose them.

	* ../evmverif/why3: started formalizing EVM in Why3

	* why3: removed all unwanted axioms from token.mlw
	https://github.com/pirapira/token_why3/blob/master/token.mlw#L167

	* read: TALx86

	* ../solidity/libsolidity/ast/ASTForward.h (dev): a definition can appear in using A = B

	* emacs: M-. and then M-*

	* ../solidity/libsolidity/interface/InterfaceHandler.cpp (abiInterface): review #996
	https://github.com/ethereum/solidity/pull/996

	* emacs: configured C++ reading environment
	http://tuhdo.github.io/c-ide.html

	* comm: had a look at a thesis
	http://www.diku.dk/hjemmesider/ansatte/hvitved/publications/hvitved12phd.pdf

	* comm: made some comments on the announcement
	https://www.reddit.com/r/ethereum/comments/50ojqr/new_blog_post_dev_update_formal_methods/

	* emacs: configured a keyboard macro for adding an entry here
	;; http://0xcc.net/unimag/1/
	(defun memo ()
	  (interactive)
	  (add-change-log-entry
	    nil
	    (expand-file-name "~/src/record/ChangeLog")))
	(setq add-log-full-name "Yoichi Hirai"
	  add-log-mailing-address "yoichi@ethereum.org")
	(global-set-key (kbd "M-l") 'memo)

2016-09-01  Yoichi Hirai  <yoichi@ethereum.org>

	* why3: writing token.mlw
	https://github.com/pirapira/token_why3

	* comm: discussion with @chriseth
	Which direction we are heading
	What to look at

	* comm: joined many channels

