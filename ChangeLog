2016-09-08  Yoichi Hirai  <yoichi@ethereum.org>

	* dry: added ORIGIN, CODESIZE and PC instructions
	https://github.com/pirapira/dry-analyzer

	* solidity: trying solc --formal token.sol
	I'm meeting many problems one after another.  Many problems depend on each other: before solving one I cannot even observe the other.
	In solidity repository, reported #1054, #1062, #1065 and #1066 about this.
	I opened PRs for #1054 and #1062 but I haven't started with the last two.

	* lifehack:
	I started using something like a legal pad to keep track of what I'm doing.
	Whenever I come up with a thing to do, I add it as the last line, but keep on working on the current item.
	When the current item is not urgent it goes to the todo app, and the line is crossed out.
	When the current item depends on something else, I draw an arrow showing the dependency and move to the next item.
	When I have to wait for the machine, I start on the next item in parallel.
	One thing I found today.  I started writing the tmux pane index to the current items.
	This makes it much easier to go back where I was.

2016-09-07  Yoichi Hirai  <yoichi@ethereum.org>

	* ../solidity/libsolidity/formal/Why3Translator.cpp: Oh it collapeses all namespaces...
	(appendPreface): raw string literal R"....".

	* ../solidity/libsolidity/ast/AST_accept.h (dev): This file defines the visiting order
	(dev) saw the visitor pattern.  In OCaml there would be a traversing function that takes a function.

	* ../solidity/libsolidity/ast/AST.h (dev): need to know the difference of Default, Private, Internal, Public, External

	* ../solidity/libsolidity/ast/ASTAnnotations.h (dev): "///<" tells doxygen that the comment comes after the element

	* ../solidity/libsolidity/ast/Types.h (dev): what is TypeType? ... as in uint32(2)
	(dev): what is InaccessibleDynamic?
	(dev): what is a `using for` directive?
	(dev): why is IntegerType::m_bits signed?
	(dev): calldataEncodedSize assumes m_bits is not larger than 256.
	(dev): isAddress(), isSigned() why expose two bits instead of a ternary choice?
	(dev): FixpointType::calldataEncodedSize() also assumes everything is not bigger than 256 bits, but the constructor forces it.
	(dev): how to interface mappings when libraries
	(dev): `actualType` is is actual?

	* ../solidity/libsolidity/parsing/Token.h (dev):
	I cannot imagine how ElementaryTypeNameToken would be used.  Two numbers?

	* ../solidity/libsolidity/ast/ASTForward.h: I've never thought about accumulating many forward declarations into one file.  neat.

	* ../solidity/libsolidity/interface/Exceptions.h (dev): So, we live in ::dev::solidity
	(dev): Why3TranslatorError seems useful
	(dev): Why is a list called SecondarySourceLocation
	(dev): boost::error_info, wow this uses an incomplete type as a tag!

	* ../solidity/libdevcore/Exceptions.h (dev): err_info_comment etc seem useful.

	* ../solidity/libdevcore/FixedHash.h (dev): "\342\200\246" is what?

	* ../solidity/libdevcore/Common.h (dev): ScopeGuard should be useful

	* solidity: trying to solve some ambiguities in
	#1037, #1038

	* emacs: (setq-default c-default-style "bsd")
	This looked closer to our style.

	* read: http://www.spark-2014.org/entries/detail/research-corner-spark-2014-vs-frama-c-vs-why3
	compares Ada SPARK and Frama-C
	design choices
	ghost code
	understanding failures
	Does it make sense to dynamically check the post-conditions at runtime?
	  ah, OK, that's why E-ACSL was created.
	Does it make sense to allow program functions in the specification?
	  In that case, like in SPARK, side-effect-less functions should be considered.
	Maybe ghost codes should be supported
	Maybe view functions should be available in the specification

2016-09-06  Yoichi Hirai  <yoichi@ethereum.org>

	* solidity: test/soltest
	When I run it it shows a message `ERROR: ipcPath not set!`
	Maybe I should start a client instance for this one.
	Is this tool documented?

	* read: http://research.microsoft.com/en-us/um/people/nswamy/papers/solidether.pdf
	Eth effect useful under a particular design pattern, where any send failures would abort the whole program execution.
	The Eth condition can be strengthened so that it guarantees, after one call fails no subsequent calls would happen.

	* read: https://github.com/ewasm/evm2wasm/blob/master/wasm/ADDMOD.wast
	256 bit calculus -> 64 bit calculus measn everything has to be done four times.
	This kind of problem is a good target for Isabelle/HOL, for instance.

	* read:
	https://medium.com/@graycoding/lessons-learned-from-making-a-chess-game-for-ethereum-6917c01178b6
	This means
	- there should be a way to translate state diagram into executables
	- need of off-chain, on-chain integration
	  (maybe some partial evaluation type systems)

2016-09-05  Yoichi Hirai  <yoichi@ethereum.org>

	* dry: added arithmetic instructions
	https://github.com/pirapira/dry-analyzer/issues/6

	* cpp-ethereum: created #3287

	* solidity: reviewed #994 and #993

	* general: created a list of projects with merits/time points.

	* dry: created issues for missing opcodes.

	* ../go-ethereum/eth/api.go: TraceTransaction
	I came up with an idea of annotating vm.trace with the origins of the values on the stack.
	Maybe this would add {op_arg_origin: [{step: 6, desc: "CALLER"}]} in each step.
	http://ethereum.stackexchange.com/questions/4282/how-to-check-the-vm-trace-using-geth
	So, created a github issue about it.  https://github.com/pirapira/dry-analyzer/issues/11

2016-09-04  Yoichi Hirai  <yoichi@ethereum.org>

	* general: on Gitter, explained the trade off between the bytecode verification and Solidity verification
	bytecode has ease of verification, and the trustworthiness of the result
	Solidity has readability

	* ewasm: WASM semantics in K system
	https://github.com/kframework/wasm-semantics
	looks small.  Is this the whole language?

2016-09-03  Yoichi Hirai  <yoichi@ethereum.org>

	* why3: lively discussion on Gitter
	@mrsmkl shortened the why3-token file
	"why3" tactic not working with Coq 8.5
	@leonardoalt SeaHorn and CPAChecker might be able to prove invariants
	Think about Solidity -> LLVM and what can be done

	* dry: got a pull-request from @tomsib2001

	* env: got a chair and a desk at home.

	* dry: Dr. Y's anayzer out in reddit.  Got some feedbacks.  Need to implement all instructions.

2016-09-02  Yoichi Hirai  <yoichi@ethereum.org>

	* why3: double_wp module
	A formalization of a stack machine.  Possible to verify bytecode fragments and then compose them.

	* ../evmverif/why3: started formalizing EVM in Why3

	* why3: removed all unwanted axioms from token.mlw
	https://github.com/pirapira/token_why3/blob/master/token.mlw#L167

	* read: TALx86

	* ../solidity/libsolidity/ast/ASTForward.h (dev): a definition can appear in using A = B

	* emacs: M-. and then M-*

	* ../solidity/libsolidity/interface/InterfaceHandler.cpp (abiInterface): review #996
	https://github.com/ethereum/solidity/pull/996

	* emacs: configured C++ reading environment
	http://tuhdo.github.io/c-ide.html

	* comm: had a look at a thesis
	http://www.diku.dk/hjemmesider/ansatte/hvitved/publications/hvitved12phd.pdf

	* comm: made some comments on the announcement
	https://www.reddit.com/r/ethereum/comments/50ojqr/new_blog_post_dev_update_formal_methods/

	* emacs: configured a keyboard macro for adding an entry here
	;; http://0xcc.net/unimag/1/
	(defun memo ()
	  (interactive)
	  (add-change-log-entry
	    nil
	    (expand-file-name "~/src/record/ChangeLog")))
	(setq add-log-full-name "Yoichi Hirai"
	  add-log-mailing-address "yoichi@ethereum.org")
	(global-set-key (kbd "M-l") 'memo)

2016-09-01  Yoichi Hirai  <yoichi@ethereum.org>

	* why3: writing token.mlw
	https://github.com/pirapira/token_why3

	* comm: discussion with @chriseth
	Which direction we are heading
	What to look at

	* comm: joined many channels

